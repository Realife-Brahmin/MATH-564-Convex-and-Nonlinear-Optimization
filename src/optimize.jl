# module optimize

# export optimize

function optimize(pr; 
    verbose::Bool=false, 
    log::Bool=true,
    log_path::String="./logging/",
    itrStart::Int64=1)

    log_txt = log_path*"log_"*string(pr.objective)*"_"*pr.alg.method*"_"*pr.alg.linesearch*"_"*string(pr.alg.maxiter)*".txt"

    # Initial settings
    dftol = pr.alg.dftol
    progress = pr.alg.progress
    maxiter = pr.alg.maxiter
    x0 = pr.x0
    x = x0
    obj = pr.objective
    @show p = pr.p
    M = max(size(p.data, 1), 1)
    fnext = 1e10
    f‚Çñ = obj(x0, p, getGradientToo=false)
    n = length(x)
    itr = 1
    fvals, Œ±vals = [zeros(Float64, maxiter) for _ in 1:2]
    backtrackVals = zeros(Int64, maxiter, 1)
    xvals = zeros(Float64, n, maxiter)
    
    myprintln(true, "Begin with the solver:", log_path=log_txt)
    
    while abs(fnext - f‚Çñ) ‚â• dftol && itr ‚â§ maxiter
        printOrNot = verbose && (itr % progress == 0)
        # printOrNot = false
        myprintln(printOrNot, "Iteration $(itr):", log_path=log_txt)
        f‚Çñ, ‚àáf‚Çñ = obj(x, p)
        p‚Çñ = findDirection(pr, ‚àáf‚Çñ)
        Œ±, x, fnext, backtrackNum = linesearch(pr, x, p‚Çñ, itrStart=itrStart, verbose=printOrNot)
        fvals[itr] = fnext
        Œ±vals[itr] = Œ±
        backtrackVals[itr] = backtrackNum
        xvals[:, itr] = x
        itr += 1
    end
    
    if itr > maxiter
        converged = false
        statusMessage = "Failed to converge despite $(maxiter) iterations! üò¢"
        myprintln(true, statusMessage, log_path=log_txt)
        @warn statusMessage
    else
        converged = true
        statusMessage = "Convergence achieved in $(itr) iterations üòÑ"
        myprintln(true, statusMessage, log_path=log_txt)
        # truncating arrays as they weren't filled to capacity
        fvals, Œ±vals, backtrackVals, xvals = [arr[1:itr] for arr in (fvals, Œ±vals, backtrackVals, xvals)]
    end
    
    res = (converged=converged, statusMessage=statusMessage, fvals=fvals, Œ±vals=Œ±vals, backtrackVals=backtrackVals, xvals=xvals, M=M)

    return res
end


function findDirection(pr::NamedTuple, ‚àáfnow::Vector{Float64};
    verbose::Bool=false)::Vector{Float64}
    method = pr.alg.method
    n = length(‚àáfnow)
    if method == "GradientDescent"
        # B‚Çñ = I(n)
        # p‚Çñ = -B‚Çñ*‚àáfnow
        p‚Çñ = -‚àáfnow
    elseif method == "ConjugateGradientDescent"
        @error "Currently not formulated for this method"
    else 
        @error "Currently not formulated for this method"
    end

    return p‚Çñ
end

function linesearch(pr::NamedTuple, xnow::Vector{Float64}, 
    p‚Çñ::Vector{Float64};
    itrMax::Int64=50,
    itrStart::Int64=1,
    verbose::Bool=false,
    log::Bool=true,
    log_path::String="./logging/")
    
    obj = pr.objective
    p = pr.p
    isStrongWolfe = (pr.alg.linesearch == "StrongWolfe")
    c‚ÇÅ = pr.alg.c1
    Œ≤ = 1 / 2^(itrStart-1)
    xnext = copy(xnow)
    f‚Çñ, ‚àáf‚Çñ = obj(xnow, p)
    fnext = f‚Çñ
    log_txt = log_path*"log_"*string(pr.objective)*"_"*pr.alg.method*"_"*pr.alg.linesearch*"_"*string(pr.alg.maxiter)*".txt"
    itr_search_for_Œ± = itrStart-1

    while itr_search_for_Œ± ‚â§ itrMax
        xnext .= xnow .+ Œ≤ .* p‚Çñ
        myprintln(verbose, "Let's shift x to $(xnext)", log_path=log_txt)
        fnext, ‚àáfnext = obj(xnext, p)
        comparison_val = f‚Çñ + c‚ÇÅ * Œ≤ * dot(‚àáf‚Çñ, p‚Çñ)

        if fnext ‚â§ comparison_val
            myprintln(verbose, "Armijo condition satisfied for Œ≤ = $(Œ≤)", log_path=log_txt)
            if isStrongWolfe && abs(dot(‚àáfnext, p‚Çñ)) < abs(c‚ÇÅ * dot(‚àáf‚Çñ, p‚Çñ))
                myprintln(false, "Curvature condition NOT satisfied for Œ≤ = $(Œ≤)", log_path=log_txt)
                Œ≤ /= 2
                itr_search_for_Œ± += 1
            else
                myprintln(verbose, "Curvature condition satisfied for Œ≤ = $(Œ≤)", log_path=log_txt)
                break
            end
        else
            myprintln(false, "Armijo condition NOT satisfied for Œ≤ = $(Œ≤)", log=log)
            Œ≤ /= 2
            itr_search_for_Œ± += 1
        end
    end

    if itr_search_for_Œ± > itrMax
        @error "Line Search failed at point x = $(xnext) despite $(itr_search_for_Œ±) iterations."
    end

    Œ± = Œ≤
    return (Œ±=Œ±, x=xnext, f=fnext, backtracks=itr_search_for_Œ±) 
end

# function linesearch(pr::NamedTuple, xnow::Vector{Float64}, 
#     p‚Çñ::Vector{Float64};
#     itrMax::Int64=50,
#     itrStart::Int64=1,
#     verbose::Bool=false,
#     log::Bool=true)
    
#     obj = pr.objective
#     p = pr.p
#     linesearch = pr.alg.linesearch
#     c‚ÇÅ = pr.alg.c1
#     c‚ÇÇ = pr.alg.c2
#     Œ≤ = 1/2^(itrStart-1)
#     diff = Œ≤*p‚Çñ
#     xnext = xnow+diff
#     f‚Çñ, ‚àáf‚Çñ = obj(xnow, p, verbose=verbose, log=log)
#     fnext = f‚Çñ
#     itr_search_for_Œ± = itrStart-1
#     myprintln(verbose, "Current value of F, f‚Çñ = $(f‚Çñ)", log=log)
#     armijoSatisfied = false
#     strongWolfeSatisfied = false
#     if linesearch == "StrongWolfe"
#         while !strongWolfeSatisfied && itr_search_for_Œ± ‚â§ itrMax
#             diff = Œ≤*p‚Çñ
#             myprintln(false, "Let's shift x by $(diff)", log=log)
#             xnext = xnow+diff
#             fnext = obj(xnext, p, getGradientToo=false)
#             # println(c‚ÇÅ*Œ≤*‚àáf‚Çñ'*p‚Çñ)
#             myprintln(false, "To be compared against: $(f‚Çñ + c‚ÇÅ*Œ≤*‚àáf‚Çñ'*p‚Çñ)", log=log)
#             if fnext ‚â§ f‚Çñ + c‚ÇÅ*Œ≤*‚àáf‚Çñ'*p‚Çñ
#                 myprintln(verbose, "Armijo condition satisfied for Œ≤ = $(Œ≤)", log=log)
#                 fnext, ‚àáfnext = obj(xnext, p)
#                 if abs(‚àáfnext'*p‚Çñ) ‚â• abs(c‚ÇÇ*‚àáf‚Çñ'*p‚Çñ)
#                     myprintln(verbose, "Curvature condition satisfied for Œ≤ = $(Œ≤)", log=log)
#                     strongWolfeSatisfied = true
#                 else
#                     itr_search_for_Œ± += 1
#                     myprintln(false, "Curvature condition NOT satisfied for Œ≤ = $(Œ≤)", log=log)
#                     Œ≤ /= 2
#                     myprintln(false, "Line Search Iterations = $(itr_search_for_Œ±)", log=log)
#                 end
#             else
#                 itr_search_for_Œ± += 1
#                 myprintln(false, "Armijo condition NOT satisfied for Œ≤ = $(Œ≤)", log=log)
#                 Œ≤ /= 2
#                 myprintln(false, "Line Search Iterations = $(itr_search_for_Œ±)", log=log)
#             end 
#         end
#     elseif linesearch == "Armijo"
#         # f‚Çñ, ‚àáf‚Çñ = obj(xnow, p)
#         while !armijoSatisfied && itr_search_for_Œ± ‚â§ itrMax
#             diff = Œ≤*p‚Çñ
#             myprintln(false, "Let's shift x by $(diff)", log=log)
#             xnext = xnow+diff
#             fnext = obj(xnext, p, getGradientToo=false)
#             # println(c‚ÇÅ*Œ≤*‚àáf‚Çñ'*p‚Çñ)
#             myprintln(false, "To be compared against: $(f‚Çñ + c‚ÇÅ*Œ≤*‚àáf‚Çñ'*p‚Çñ)", log=log)
#             if fnext ‚â§ f‚Çñ + c‚ÇÅ*Œ≤*‚àáf‚Çñ'*p‚Çñ
#                 myprintln(verbose, "Armijo condition satisfied for Œ≤ = $(Œ≤)", log=log)
#                 armijoSatisfied = true
#             else
#                 itr_search_for_Œ± += 1
#                 myprintln(false, "Armijo condition NOT satisfied for Œ≤ = $(Œ≤)", log=log)
#                 Œ≤ /= 2
#                 myprintln(false, "Line Search Iterations = $(itr_search_for_Œ±)", log=log)
#             end 
#         end
#     else 
#         @error "Unknown linesearch condition"
#     end
    
#     if itr_search_for_Œ± > itrMax
#         @error "Line Search failed at point x = $(xnext) despite $(itr_search_for_Œ±) iterations."
#     end

#     Œ± = Œ≤
#     return (Œ±=Œ±, x=xnext, f=fnext, backtracks=itr_search_for_Œ±) 
# end

# end